// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String            @id @default(uuid())
  firstName                String            @db.VarChar(100)
  lastName                 String            @db.VarChar(100)
  phone                    String            @unique @db.VarChar(20)
  email                    String            @unique @db.VarChar(255)
  dateOfBirth              DateTime          @db.Date
  password                 String            @db.VarChar(255)
  resetToken               String?           @db.VarChar(255)
  resetTokenExpiry         DateTime?
  passwordResetOtp         String?           @db.VarChar(6)
  passwordResetOtpExpiry   DateTime?
  profilePicture           String?           @db.VarChar(500)
  createdAt                DateTime          @default(now())
  updatedAt                DateTime          @updatedAt

  // Relations
  preferences              UserPreference[]
  articles                 Article[]         @relation("UserArticles")
  refreshTokens            RefreshToken[]

  @@map("users")
}

model Category {
  id              String            @id @default(uuid())
  name            String            @unique @db.VarChar(100)
  description     String?           @db.Text
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relations
  userPreferences UserPreference[]
  articles        Article[]

  @@map("categories")
}

model Article {
  id              String      @id @default(uuid())
  title           String      @db.VarChar(255)
  description     String      @db.Text
  content         String      @db.Text
  imageUrl        String?     @db.VarChar(500)
  tags            String[]    @db.Text
  isBlocked       Boolean     @default(false)
  viewsCount      Int         @default(0)
  likesCount      Int         @default(0)
  viewers         String[]    @db.Text
  likers          String[]    @db.Text
  bookmarkers     String[]    @db.Text
  bookmarksCount  Int         @default(0)
  authorId        String
  categoryId      String
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relations
  author          User        @relation("UserArticles", fields: [authorId], references: [id])
  category        Category    @relation(fields: [categoryId], references: [id])

  @@map("articles")
}

model UserPreference {
  id         String    @id @default(uuid())
  userId     String
  categoryId String
  createdAt  DateTime  @default(now())

  // Relations
  user       User      @relation(fields: [userId], references: [id])
  category   Category  @relation(fields: [categoryId], references: [id])

  @@map("user_preferences")
}

model RefreshToken {
  id         String    @id @default(uuid())
  token      String    @db.VarChar(512)
  userId     String
  expiresAt  DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relations
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model EmailVerification {
  id         String    @id @default(uuid())
  email      String    @unique @db.VarChar(255)
  otp        String    @db.VarChar(10)
  expiresAt  DateTime  @db.Timestamptz(6)
  attempts   Int       @default(0)
  createdAt  DateTime  @default(now())

  @@map("email_verifications")
}
